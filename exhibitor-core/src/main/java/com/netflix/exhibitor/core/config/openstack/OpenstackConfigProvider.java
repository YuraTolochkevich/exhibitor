package com.netflix.exhibitor.core.config.openstack;

import com.google.api.client.http.HttpResponseException;
import com.google.api.client.util.DateTime;
import com.google.api.services.storage.model.StorageObject;
import com.netflix.exhibitor.core.config.*;

import com.netflix.exhibitor.core.openstack.OpenstackClient;
import com.netflix.exhibitor.core.openstack.OpenstackClientFactory;
import com.netflix.exhibitor.core.openstack.OpenstackCredentials;
import org.apache.http.Header;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class OpenstackConfigProvider implements ConfigProvider {

    private final OpenstackConfigArguments arguments;
    private final OpenstackClient openstackClient;
    private final String hostname;
    private final Properties defaults;

    public static final String AUTO_GENERATED_NOTE = "Auto-generated by Exhibitor on %s";
    public static final int HTTP_NOT_FOUND = 404;

    public OpenstackConfigProvider(OpenstackConfigArguments arguments, OpenstackClientFactory factory,
                                  String hostname, OpenstackCredentials credentials, Properties defaults) throws Exception {
        this.arguments = arguments;
        this.openstackClient = factory.makeNewClient(credentials);
        this.hostname = hostname;
        this.defaults = defaults;
    }

    public OpenstackConfigProvider(OpenstackConfigArguments arguments, OpenstackClientFactory factory,
                                  String hostname, OpenstackCredentials credentials) throws Exception {
        this(arguments, factory, hostname, credentials, new Properties());
    }

    private Properties getConfigObject() throws Exception {
        Properties props = new Properties();
        try {
            InputStream content = openstackClient.getObject(arguments.getBucketName(), arguments.getObjectName());
            props.load(content);
            return props;
        } catch (HttpResponseException e) {
                throw e;
        }
    }

    @Override
    public void start() throws Exception {
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception {
        long lastModified;
        Properties properties;

        Properties configObject = getConfigObject();
        Header[] meta= openstackClient.getObjectMeta(arguments.getBucketName(), arguments.getObjectName());
        if (configObject != null) {
            lastModified = getModificationTime(meta);
            properties = configObject;
        } else {
            lastModified = new Date(0L).getTime();
            properties = new Properties();
        }

        PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(config, lastModified);
    }

    private Header[] getConfigObjectMetadata() throws Exception {
        try {
            Header[] metadata = openstackClient.getObjectMeta(arguments.getBucketName(), arguments.getObjectName());
            if (metadata.length > 0) {
                return metadata;
            }
        } catch (HttpResponseException e) {
            if (!isNotFoundError(e)) {
                throw e;
            }
        }
        return null;
    }
    private boolean isNotFoundError(HttpResponseException e) {
        return (e.getStatusCode() == HTTP_NOT_FOUND);
    }

    private long getModificationTime(Header[] meta){
        String lastModoficationTimeStr = null;
        for(Header header: meta) {
            if (header.getName() == "Last-Modified") {
                lastModoficationTimeStr = header.getName();
                break;
            }
        }
        if (lastModoficationTimeStr != null) {
            Pattern p = Pattern.compile("(\\d{2})\\D+(\\d{4})\\D+(\\d{2}:\\d{2}:\\d{2})");
            Matcher m = p.matcher(lastModoficationTimeStr);
            m.find();
            String month = m.group(1);
            String year = m.group(2);
            String time= m.group(3).replaceAll(":","");

            return Long.parseLong(String.format("%s,%s,%s",year,month,time));

        }
        return 0;
    }

    public static void main(String[] args) {
     String heaer = "Tue, 02 Jun 2015 16:18:45 GMT";

        Pattern p = Pattern.compile("(\\d{2})\\D+(\\d{4})\\D+(\\d{2}:\\d{2}:\\d{2})");
        Matcher m = p.matcher(heaer);
        m.find();
        String month = m.group(1);
        String year = m.group(2);
        String time= m.group(3).replaceAll(":","");

        Long.parseLong(String.format("%s,%s,%s",year,month,time));
    }


    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareVersion) throws Exception {
        {
            Header[] metadata = getConfigObjectMetadata();
            if (metadata != null) {
                long lastModified = getModificationTime(metadata);
                if (lastModified != compareVersion) {
                    return null;
                }
            }
        }

        PropertyBasedInstanceConfig propertyBasedInstanceConfig = new PropertyBasedInstanceConfig(config);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        propertyBasedInstanceConfig.getProperties().store(out, String.format(AUTO_GENERATED_NOTE, hostname));

        byte[] bytes = out.toByteArray();
        openstackClient.putObject(bytes, arguments.getBucketName(), arguments.getObjectName());

        Header[] metadata = getConfigObjectMetadata();
        return new LoadedInstanceConfig(propertyBasedInstanceConfig, getModificationTime(metadata));
    }


    @Override
    public PseudoLock newPseudoLock() throws Exception {
        return null;
    }

    @Override
    public void close() throws IOException {

    }
}
